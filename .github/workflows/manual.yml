name: Docker Build & Push

on:
  push:
    branches: 
      - master
      - upstream-master
  pull_request:
    branches:
      - master
      - upstream-master
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to Docker Hub'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  SQLMAP_REPOSITORY: sqlmapproject/sqlmap
  WEBSOCKET_CLIENT: websocket-client

# Ensure only one workflow runs at a time per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:
  prepare:
    name: Prepare build context
    runs-on: ubuntu-latest
    outputs:
      should-push: ${{ steps.check.outputs.should-push }}
      image-tag-suffix: ${{ steps.tag.outputs.suffix }}
    steps:
      - name: Check if should push
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ inputs.push_images }}" == "true" ]]; then
            echo "should-push=true" >> $GITHUB_OUTPUT
          else
            echo "should-push=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate image tag suffix
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "suffix=-pr${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            echo "suffix=" >> $GITHUB_OUTPUT
          fi

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        variant:
          - name: main
            dockerfile: Dockerfile
            tag-suffix: ""
            platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v5,linux/s390x,linux/ppc64le
          - name: alpine
            dockerfile: Dockerfile-alpine
            tag-suffix: -alpine
            platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7
          - name: tor
            dockerfile: Dockerfile-tor
            tag-suffix: -tor
            platforms: linux/amd64,linux/arm64

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout SQLMap repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SQLMAP_REPOSITORY }}
          ref: master
          path: sqlmap
          fetch-depth: 1

      - name: Verify required files exist
        run: |
          for file in Dockerfile Dockerfile-alpine Dockerfile-tor entrypoint.sh; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file $file not found"
              exit 1
            fi
          done
          echo "✅ All required files present"

      - name: Copy build context
        run: |
          echo "📋 Copying build files to sqlmap directory..."
          cp -v Dockerfile* sqlmap/
          cp -v entrypoint.sh sqlmap/
          
          echo "📁 Build context contents:"
          ls -la sqlmap/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Docker Hub
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/sqlmap
          tags: |
            type=raw,value=latest${{ matrix.variant.tag-suffix }}${{ needs.prepare.outputs.image-tag-suffix }}
            type=ref,event=branch,suffix=${{ matrix.variant.tag-suffix }}${{ needs.prepare.outputs.image-tag-suffix }}
            type=ref,event=pr,suffix=${{ matrix.variant.tag-suffix }}
            type=sha,format=short,suffix=${{ matrix.variant.tag-suffix }}
          labels: |
            org.opencontainers.image.title=SQLMap ${{ matrix.variant.name }}
            org.opencontainers.image.description=Automatic SQL injection and database takeover tool (${{ matrix.variant.name }} variant)
            org.opencontainers.image.vendor=SQLMap Project

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./sqlmap
          file: ./sqlmap/${{ matrix.variant.dockerfile }}
          platforms: ${{ matrix.variant.platforms }}
          push: ${{ needs.prepare.outputs.should-push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            WEBSOCKET_CLIENT=${{ env.WEBSOCKET_CLIENT }}
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-from: type=gha,scope=${{ matrix.variant.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant.name }}
          provenance: false
          sbom: false

      - name: Output image details
        run: |
          echo "🐳 **${{ matrix.variant.name }} Image Details**"
          echo "📋 **Tags:** ${{ steps.meta.outputs.tags }}"
          echo "🔍 **Digest:** ${{ steps.build.outputs.digest }}"
          echo "🏗️ **Platforms:** ${{ matrix.variant.platforms }}"
          if [[ "${{ needs.prepare.outputs.should-push }}" == "true" ]]; then
            echo "✅ **Status:** Pushed to Docker Hub"
          else
            echo "🔧 **Status:** Built only (not pushed)"
          fi

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [prepare, docker-build]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Variant | Status | Pushed |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          variants=("main" "alpine" "tor")
          for variant in "${variants[@]}"; do
            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              status="✅ Success"
            else
              status="❌ Failed"
            fi
            
            if [[ "${{ needs.prepare.outputs.should-push }}" == "true" ]]; then
              pushed="Yes"
            else
              pushed="No"
            fi
            
            echo "| $variant | $status | $pushed |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ env.SQLMAP_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "**PR:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          fi